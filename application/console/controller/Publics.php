<?php
/**
 * Created by PhpStorm.
 * User: WL
 * Date: 2017/3/10
 * Time: 0:57
 */

namespace app\console\controller;

use app\console\service\User;
use think\Image;
use think\Request;

class Publics extends ConsoleBase
{

    public function __construct()
    {
        parent::__construct(); // TODO: Change the autogenerated stub
    }

    /**
     * 后台用户登录
     */
    public function login(){
        $User = model('User', 'service');
        if(request()->isPost()){
            $username = input('login_name');
            $password = input('login_pwd');
            $captcha = input('captcha');
            /* 检测验证码 TODO: */
            if(!captcha_check($captcha)){
                $this->error('验证码输入错误！');
            }

            //验证登录信息
            $validate = validate('User');
            if(!$validate->scene('login')->check(input())){
                $error = $validate->getError();
                $this->error($error);
            }

            //用户密码验证
            $uid = $User->login($username, $password);
            if(0 < $uid){ //登录成功
                $data['url'] = url('Index/index');
                $this->result($data, 1, '登录成功', 'json');
                //$this->redirect('Index/index');
            } else { //登录失败
                switch($uid) {
                    case -1: $error = '用户不存在或被禁用！'; break; //系统级别禁用
                    case -2: $error = '密码错误！'; break;
                    default: $error = '未知错误！'; break; // 0-接口参数错误（调试阶段使用）
                }
                $this->error($error);
            }
        } else {
            if($User->isLogin()){
                $this->redirect('Index/index');
            }else{
                if (strpos($_SERVER['HTTP_USER_AGENT'], 'MicroMessenger') !== false && Request::instance()->get('isapp')) {
                    $data = urlencode('fin.jrfacai.com/console/publics/code');
                    $url = "https://open.weixin.qq.com/connect/oauth2/authorize?appid=wwbcd6599e0d0c363c&redirect_uri=$data&response_type=code&scope=snsapi_privateinfo&agentid=".config('agentid')."#wechat_redirect";
                    header("Location: $url");
                    exit;
                }
                $this->assign('title', '用户登录');
                return $this->fetch();
            }
        }
    }
   /**
        授权登录
     *  
     **/
    public function code()
    {
        $code = Request::instance()->get('code');
        $token = $this->token();
        $url = "https://qyapi.weixin.qq.com/cgi-bin/user/getuserinfo?access_token=$token&code=$code";
        $res = httpGet($url);
        $res = json_decode($res,true);
        $url = "https://qyapi.weixin.qq.com/cgi-bin/user/getuserdetail?access_token=$token";
        $date = json_encode(['user_ticket'=>$res['user_ticket']]);
        $res = json_decode(httpPost($url,$date));
        $User = model('User', 'service');
        $user = $User->codeLogin($res->userid,$res->mobile);
        if (0 < $user){
            $data['url'] = url('Index/index');
            $this->redirect('Index/index');
        }else{
            switch($user) {
                case -1: $error = '用户不存在或被禁用！'; break; //系统级别禁用
                case -2: $error = '手机号不匹配！'; break;
                default: $error = '未知错误！'; break; // 0-接口参数错误（调试阶段使用）
            }
            echo "<script>alert('$error');location.href='http://fin.jrfacai.com/console/publics/login';</script>";
        }
    }
    /**获取token*/
    private function token()
    {
        $data = @json_decode(file_get_contents('./token.txt'));
        if (@$data->time <time() || @!$data->time){
            $url = "https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=".config('corpid')."&corpsecret=".config('corpsecret');
            $res = httpGet($url);
            $res = json_decode($res,true);
            $token = $res['access_token'];
            $result['token'] = $token;
            $result['time'] = time()+7000;
            file_put_contents('./token.txt', json_encode($result));
        }else{
            $token = $data->token;
        }
        return $token;
    }
    /* 退出登录 */
    public function logout(){
        if(model('User', 'service')->isLogin()){
            model('User', 'service')->logout();
            session(null);
            $this->redirect('Publics/login');
        } else {
            $this->redirect('Publics/login');
        }
    }

    /**
     * 修改密码
     */
    public function changePwd()
    {
        $old_pwd = input('old_pwd');
        $login_pwd = input('new_pwd');
        $pwd_confirm = input('pwd_confirm');
        $username = session('c_user_auth.login_name');

        $User = model('User', 'service');
        //验证原密码是否正确
        $uid = $User->login($username, $old_pwd);
        if($uid < 0){
            switch($uid) {
                case -1: $error = '用户不存在或被禁用！'; break; //系统级别禁用
                case -2: $error = '密码错误！'; break;
                default: $error = '未知错误！'; break; // 0-接口参数错误（调试阶段使用）
            }
            $this->result('', 0, $error, 'json');
        }

        $data = [];
        $data['login_pwd'] = $login_pwd;
        $data['pwd_confirm'] = $pwd_confirm;
        $data['id'] = $uid;
        $res = $User->changePwd($data);
        if($res) {
            $return['url'] = url('Publics/logout');
            $this->result($return, 1, '修改成功，即将退出系统，请重新登录！', 'json');
        }else{
            $error = $User->getError();
            $this->result('', 0, $error, 'json');
        }
    }
    public function upload(){
        $data = input();
        $file = request()->file("file");
        if($file){
            $info = $file->getInfo();
            $name = $info['name'];
            if (count(explode(',', $name)) > 1) {
                $this->result('', 0, '上传文件名称不规范', 'json');
            }
            $type = strtolower(substr($name,strrpos($name,'.')+1));
            if(in_array(strtolower($type), ['jpg' , 'jpeg' , 'gif' , 'png'])){
                $path = $data['type'] . DS . 'img';
                $path_cut = $data['type'] . DS . 'img_cut';
                $path_compress = $data['type'] . DS . 'img_compress';
            }elseif (in_array($type, ['pdf'])) {
                $path = $data['type'] . DS . 'pdf';
            }elseif (in_array($type, ['mkv','rmvb','mp4'])) {
                $path = $data['type'] . DS . 'video';
            }
            $dir = ROOT_PATH . 'public' . DS . 'uploads' . DS . $path;
            if(!is_dir($dir)){
                mkdir($dir , 0777, true);
            }
            $result = $file->move(ROOT_PATH . 'public' . DS . 'uploads' . DS . $path);
            if(isset($path_cut)){
                $dir = ROOT_PATH . 'public' . DS . 'uploads' . DS . $path_cut;
                if(!is_dir($dir.DS.substr($result->getSaveName(), 0 , 8))){
                    mkdir($dir.DS.substr($result->getSaveName(), 0 , 8) , 0777, true);
                }
                $image = Image::open($result);
                $width = $image->width();
                $height = $image->height();
                if($width > $height){
                    $image->crop(floor($height/2)*2, floor($height/2)*2, $width/2-floor($height/2), $height%2)->save($dir . DS . $result->getSaveName());
                } else {
                    $image->crop(floor($width/2)*2, floor($width/2)*2, $width%2, $height/2-floor($width/2))->save($dir . DS . $result->getSaveName());
                }
            }
            if(isset($path_compress)){
                $dir = ROOT_PATH . 'public' . DS . 'uploads' . DS . $path_compress;
                if(!is_dir($dir.DS.substr($result->getSaveName(), 0 , 8))){
                    mkdir($dir.DS.substr($result->getSaveName(), 0 , 8) , 0777, true);
                }
                $image = Image::open($result);
                $image->thumb(150,150)->save($dir . DS . $result->getSaveName());
            }
            if($result){
                $model = model("material_library");
                if(in_array($type, ['jpg' , 'jpeg' , 'gif' , 'png'])){
                    $id = $model->createMaterial($path , $path_cut , $path_compress , $result);
                } else {
                    $id = $model->createMaterial($path , '' , '' , $result);
                }
                if($id){
                    $data['id'] = $id;
                    $data['name'] = $info['name'];
                    $data['url'] = $path . DS . $result->getSaveName();
                    $this->result($data ,1 , '上传成功' , 'json');
                } else {
                    $error = $model->getError() ? $model->getError() : '保存上传材料失败';
                    $this->result('', 0, $error, 'json');
                }
            }else{
                $this->result('', 0, '上传失败', 'json');
            }
        } else {
            $this->result('', 0, '上传文件不存在', 'json');
        }
    }
    public function rotate(){
        $src = $this->request->param("src/s",'');
        $direction = $this->request->param("direction/s",'');
        $arr = explode('/', $src);
        $length = count($arr);
        $name = explode('.' ,trim(strrchr($src, '/') , '/'));
        $num = explode('_', $name[0]);
        if(count($num) == 1){
            $number = 0;
        } else {
            $number = intval($num[1]);
        }
        if($direction == 'left'){
            $rotate = 270;
            if($number > 0){
                $number = $number-90;
            } else {
                $number = 270;
            }
        } else {
            $rotate = 90;
            if($number < 270){
                $number = $number+90;
            } else {
                $number = 0;
            }
        }
        if($number == 0){
            $name = $num[0].'.'.$name[1];
        } else {
            $name = $num[0].'_'.$number.'.'.$name[1];
        }
        $arr[0] = ROOT_PATH . 'public';
        $arr[$length-1] = $name;
        $path = implode('/', $arr);
        $arr[0] = '';
        $result = implode('/', $arr);
        if(file_exists($path)){
            $this->result($result, 1, '', 'json');
        } else {
            $image = \think\Image::open(ROOT_PATH . 'public'.$src);
            $image->rotate($rotate)->save($path);
            $this->result($result, 1, '', 'json');
        }
        
    }
    public function judge(){
        $data = input();
        if(isset($data['id'])){
            $data['url'] = url($data['model'].'/'.$data['action'],['id' => $data['id']]);
            if(isset($data['supp_id'])){
                $data['url'] = url($data['model'].'/'.$data['action'],['id' => $data['id'],'supp_id' => $data['supp_id']]);
            }elseif (isset ($data['cust_id'])) {
                $data['url'] = url($data['model'].'/'.$data['action'],['id' => $data['id'],'cust_id' => $data['cust_id']]);
            }elseif (isset($data['pub_id'])){
                $data['url'] = url($data['model'].'/'.$data['action'],['id' => $data['id'],'pub_id' => $data['pub_id']]);

                
                
            }
        } else {
            $data['url'] = url($data['model'].'/'.$data['action']);
        }
        $this->result($data, 1, '', 'json');
    }
}
